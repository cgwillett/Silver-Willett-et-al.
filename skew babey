########################################################################################################################################
# Create Upstream and Downstream Intergenic Enhancer Bed Files
########################################################################################################################################

## Create files with mid point +/- 2 Kb 

cat intergenic_enhancer2.bed| awk '{mid=($2+$3)/2; print($1"\t"mid-2000"\t"mid)}' > intergenic.enhancer_upstream.bed
cat intergenic_enhancer2.bed| awk '{mid=($2+$3)/2; print($1"\t"mid"\t"mid+2000)}' > intergenic.enhancer_downstream.bed

## Check for negative values
R

up <- read.table("intergenic.enhancer_upstream.bed",$
down <- read.table("intergenic.enhancer_downstream.bed",header = FALSE, sep="\t",stringsAsFactors=FALSE, quote="")

> up2 <- up[which(up$V2 < 0),]

> head(up2)
[1] V1 V2 V3
<0 rows> (or 0-length row.names)

> down2 <- down[which(down$V3 < 0),]
> head(down2)
[1] V1 V2 V3
<0 rows> (or 0-length row.names)

# In order to di BigWigAvgOverBed, you need whole numbers
# Create new bed file with rounded values

> up$roundv2 <- round(up$V2)

> up$roundv3 <- round(up$V3)

> up2 <- up[c(1,4,5)]

> head(up2)
    V1 roundv2 roundv3
1 Chr1    1130    3130
2 Chr1   19119   21119
3 Chr1   19465   21465
4 Chr1   53478   55478
5 Chr1   66600   68600
6 Chr1   75659   77659

> write.table(up2, "intergenic.enhancer_upstream.round.bed", sep="\t", quote=FALSE, col.names=FALSE, row.names=FALSE)

########################################################################################################################################
# BigWigAverageOverBed
########################################################################################################################################

for FILE in *.bw; do bigWigAverageOverBed $FILE intergenic.enhancer_down.round.bed $FILE.intergenic_enhancer.down.tab; done
for FILE in *.bw; do bigWigAverageOverBed $FILE intergenic.enhancer_upstream.round.2.bed $FILE.intergenic_enhancer.up.tab; done 


########################################################################################################################################
# Combine with Cluster Data
########################################################################################################################################

# There is a quirk with SeqPlots where the Cluster output file has a starting coordinate -1, which was messing up calling cluster IDs


# Read in cluster info
c <- read.table("Clusters_2022-08-05_19-27-45.csv", header = TRUE, sep=",",stringsAsFactors=FALSE, quote="")

# Calculate Midpoint
c[,3:4] <- sapply(c[,3:4],as.numeric)
c$average <- round(rowMeans(subset(c,select=c(start,end))))


# Read in up/down bed files
up <- read.table("intergenic.enhancer_upstream.round.2.bed",sep="\t",header=FALSE)
down <- read.table("intergenic.enhancer_down.round.bed",sep="\t",header=FALSE)

# Read in original and re-calculate midpoint
ie <- read.table("intergenic_enhancer2.bed",sep="\t")
ie$V2_plus1 <- as.numeric(paste(ie$V2 + 1))

ie$average <- round(rowMeans(subset(ie,select=c(V2_plus1, V3))))

up$check <- ifelse(up$V3 == ie$average, ie$average, NA)
# There are some discrepancies so just paste those bad boys together
up$check2 <- ie$average

# Sanity check
check <- up[which(up$check == up$check2),]

# Get cluster info for each coordinate
up$cluster <- ifelse(up$check2 == c$average, c$ClusterID, NA)
table(up$cluster)

#1    2    3    4    5    6    7    8 
#982 1360 1465 1088 1427 2760 1295 1529 

upna <- as.data.frame(is.na(up$cluster))
table(upna)

# FALSE  TRUE 
# 11906    19 

# Do this again with the down file
down$check <- ifelse(down$V2== ie$average, ie$average, NA)
down$check2 <- ie$average

down$cluster <- ifelse(down$check2 == c$average, c$ClusterID, NA)
table(down$cluster)

# 1    2    3    4    5    6    7    8 
# 982 1360 1465 1088 1427 2760 1295 1529 

# Good these should match!







# General Pipeline

separate upstream and downstream bed file

calculate BW Avg Over Bed (position, signal)

Get Cluster info from seqplots (position, cluster ID)

combine BWAvgOverBed with Cluster info

subtract upstream - downstream  BWAvgOverBed per cluster

take absolute value of skew for each cluster

Sum/Avg of skew for all clusters for each bw file = total skew


